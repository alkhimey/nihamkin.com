Building Telegram Bots with Azure
#################################

:date: 2020/12/08 18:00:00
:tags: Javascript, Azure, Telegram, Node
:authors: Artium Nihamkin

.. role:: javascript(code)
   :language: javascript


.. image:: files/telebot/telegram_azure.jpg
   :alt: Telegram and Azure logos
   :align: center
   :width: 20%

This week I experimented with telegram bot development. I already built a
telegram bot in the past, but this time I decided to do it properly: use a
common framework and host in on the cloud (hence the Azure part).

The result is a bot called `unix_fortune_bot <https://web.telegram.org/#/im?p=@unix_fortune_bot>`_
who's purpose is act similar to the unix `fortune <https://en.wikipedia.org/wiki/Fortune_(Unix)>`_
program.

The other result is this blog post which will explain how to develop a
bot using the `Telegraf <https://telegraf.js.org/#/>`_ framework and host it on
Azure.

Architecture
=============

Before we begin with practical stuff, let us discuss how the architecture of a
Telegram bot looks like. Everything is explained in the `documentation <https://core.telegram.org/bots>`_,
but I feel that a little commentary is required.

There are two parts to the bot: the **frontend** which is telegram's part and a
**backend** which is bot developer's part.

We will see how to create the frontend using the *FatherBot* interface. Once it
is created, the connection to the backend is done through a secret token. The
token will tell telegram which bot is actually invoking the API function and
telegram servers would act accordingly.

The backend can be any web application. It interacts with the frontend using
the telegram `REST API <https://core.telegram.org/bots/api>`_.

So for example to send a message to a chat, one would call the `sendmessage <https://core.telegram.org/bots/api#sendmessage>`_
method.

Another issue is how the frontend delivers the the messages from the chats to
the backend. There are two methods:
 
* The backend can poll for messages.
* The backend can register a callback. It gives telegram a url to which
  telegram should POST the messages once they arrive.

We will use the callback method and I will also explain why.

Registering a Bot
=================
To register a new bot you need to talk with `BotFather
<https://t.me/botfather>`_ telegram bot and follow it's instructions. This step
is rather unusual as one would expect telegram provide standard web interface
for registering and managing bots. It seems that telegram is trying to push the
telegram app as a frontend for everything, and creating bots is part of this
philosophy.

A tip for you, I found that working with the `web interface
<https://web.telegram.org>`_ to telegram is more convenient for development
than using a phone.

After giving it a name and a username, BotFather will give you a token. We will
meet BotFather again soon, but for now this token is all we need. *This token
should be kept secret*. I also advice to revoke it using BotFather at the end
of the development process, just in case you accidentally exposed it in the git
history or in a screenshot like I did here.

.. figure:: files/telebot/newbot.png
   :align: center
   :width: 50%
   :alt: Registering new bot with BotFather

Now you can open a chat with your bot, add it to groups etc. It will not do
much because no backend is receiving the messages and sending responses yet.

.. figure:: files/telebot/botemptychat.png
   :align: center
   :width: 100%
   :alt: Bot does not respond in the chat

balblabla


.. code-block:: javascript


    // ==UserScript==
    // @name     Filter Out Meetup Search Results
    // @version  4
    // @description Remove items from search results of meetup.com based on regular expression. Personally I use this to filter out organizers that are not relevant to me.
    // @author      Artium Nihamkin artium@nihamkin.com
    // @icon https://secure.meetupstatic.com/s/img/68780390453345256452178/favicon.ico
    // @homepageURL    http://www.nihamkin.com
    // @include https://www.meetup.com/*
    // @require http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js
    // ==/UserScript==

    function f() {

        // You need to edit this with your own filtering keywords. The regular expression
        // is run against href attributes of the search result links.
        // See http://www.nihamkin.com/filtering-meetup-organizers-with-greasemonkey-script.html
        //
        var blacklist = ["All-the-best-Workshops-DIY-Israel", "The-Best-Science-Bar-Talks-in-Tel-aviv"];
        var blRegex = new RegExp(blacklist.join("|"));

        var links = $("a").filter(function(i,el) { return (blRegex.test(el.href)); })
          .closest("li.event-listing")
          .remove();
    }

    document.body.addEventListener("DOMNodeInserted", f, true);

First, some comparisons before and after:


|pic1| |pic2|


.. |pic2| image:: files/greasemonkey/after.png
   :alt: After running greasemonkey on my search results
   :width: 45%

.. |pic1| image:: files/greasemonkey/before.png
   :alt: Before running greasemonkey on my search results
   :width: 45%


.. image:: files/greasemonkey/link.png
   :alt: How to determine the href using the the built-in browser inspector
   :align: center
   :width: 80%

After building the regular expression, the filtering will happen. This task is
assisted by jquery library which is imported in the :code:`@require` line.

