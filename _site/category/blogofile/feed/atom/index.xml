<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">Artium Nihamkin's Blog</title>
  <subtitle type="text">Just anhother personal blog.</subtitle>

  <updated>2012-11-19T11:28:08Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://www.nihamkin.com" />
  <id>http://www.nihamkin.com/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://www.nihamkin.com/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://www.nihamkin.com</uri>
    </author>
    <title type="html"><![CDATA[Strange Blogofile IO Error]]></title>
    <link rel="alternate" type="text/html" href="http://www.nihamkin.com/2012/10/13/strange-blogofile-io-error" />
    <id>http://www.nihamkin.com/2012/10/13/strange-blogofile-io-error</id>
    <updated>2012-10-13T15:00:00Z</updated>
    <published>2012-10-13T15:00:00Z</published>
    <category scheme="http://www.nihamkin.com" term="Emacs" />
    <category scheme="http://www.nihamkin.com" term="Blogofile" />
    <summary type="html"><![CDATA[Strange Blogofile IO Error]]></summary>
    <content type="html" xml:base="http://www.nihamkin.com/2012/10/13/strange-blogofile-io-error"><![CDATA[<p>Sometimes when building a blogofile site I encounter the following IO error (excuse me for the text spill):</p>
<div class="pygments_monokai"><pre><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">&quot;/usr/local/bin/blogofile&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">9</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="n">load_entry_point</span><span class="p">(</span><span class="s">&#39;Blogofile==0.7.1&#39;</span><span class="p">,</span> <span class="s">&#39;console_scripts&#39;</span><span class="p">,</span> <span class="s">&#39;blogofile&#39;</span><span class="p">)()</span>
  <span class="n">File</span> <span class="s">&quot;/usr/local/lib/python2.7/dist-packages/Blogofile-0.7.1-py2.7.egg/blogofile/main.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">135</span><span class="p">,</span> <span class="ow">in</span> <span class="n">main</span>
    <span class="n">args</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
  <span class="n">File</span> <span class="s">&quot;/usr/local/lib/python2.7/dist-packages/Blogofile-0.7.1-py2.7.egg/blogofile/main.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">201</span><span class="p">,</span> <span class="ow">in</span> <span class="n">do_build</span>
    <span class="n">writer</span><span class="o">.</span><span class="n">write_site</span><span class="p">()</span>
  <span class="n">File</span> <span class="s">&quot;/usr/local/lib/python2.7/dist-packages/Blogofile-0.7.1-py2.7.egg/blogofile/writer.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">53</span><span class="p">,</span> <span class="ow">in</span> <span class="n">write_site</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__write_files</span><span class="p">()</span>
  <span class="n">File</span> <span class="s">&quot;/usr/local/lib/python2.7/dist-packages/Blogofile-0.7.1-py2.7.egg/blogofile/writer.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">103</span><span class="p">,</span> <span class="ow">in</span> <span class="n">__write_files</span>
    <span class="n">t_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">t_fn_path</span><span class="p">)</span>
<span class="ne">IOError</span><span class="p">:</span> <span class="p">[</span><span class="n">Errno</span> <span class="mi">2</span><span class="p">]</span> <span class="n">No</span> <span class="n">such</span> <span class="nb">file</span> <span class="ow">or</span> <span class="n">directory</span><span class="p">:</span> <span class="s">&#39;./.#index.html.mako&#39;</span>
</pre></div>

<p>This error was a bit confusing. Why does it say that index.html.mako does not exist when it is open right here in my editor? </p>
<p>Well the editor, specifically Emacs is the cause of problem here. If you do not save your files immediately before running <em>blogofile build</em> there is a chance that an Emacs auto-save file will appear in your directory. The file looks like <em>#index.html.mako#</em> and blogofile probably have problems with the unusual file name. Once you save your files with <em>C-x C-s</em> the file will be gone.</p>
<p>Alternatively you can make Emacs save the auto-save files in one dedicated directory. Here is an <a href="http://emacswiki.org/emacs/AutoSave">emacswiki article</a> that explains how to achieve this.</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://www.nihamkin.com</uri>
    </author>
    <title type="html"><![CDATA[Highlighting Special Posts in Blogofile]]></title>
    <link rel="alternate" type="text/html" href="http://www.nihamkin.com/2012/09/25/highlighting-special-posts-in-blogofile" />
    <id>http://www.nihamkin.com/2012/09/25/highlighting-special-posts-in-blogofile</id>
    <updated>2012-09-25T17:00:00Z</updated>
    <published>2012-09-25T17:00:00Z</published>
    <category scheme="http://www.nihamkin.com" term="Blogofile" />
    <category scheme="http://www.nihamkin.com" term="Special" />
    <summary type="html"><![CDATA[Highlighting Special Posts in Blogofile]]></summary>
    <content type="html" xml:base="http://www.nihamkin.com/2012/09/25/highlighting-special-posts-in-blogofile"><![CDATA[<p>This simple but use-full blogofile hack will allow you to alter the style of posts which are marked as special. 
For example the post you are reading belongs to the "Special" category and therefore has a golden background instead of the gray default one.</p>
<p>This is quite straightforward hack, all you have to do is to modify the "_templates/site.mako" template (assuming version 0.7.1). </p>
<p>Replace the line:</p>
<div class="pygments_monokai"><pre><span class="x">&lt;div class=&quot;blog_post&quot;&gt;</span>
</pre></div>

<p>with the following snippet:</p>
<div class="pygments_monokai"><pre><span class="cp">%</span> <span class="k">if</span> <span class="s">&quot;Special&quot;</span> <span class="ow">in</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">post</span><span class="o">.</span><span class="n">categories</span><span class="p">]:</span><span class="x"></span>
<span class="x">&lt;div class=&quot;blog_post&quot; style=&quot;background-color: gold;&quot;&gt;</span>
<span class="cp">%</span> <span class="k">else</span><span class="p">:</span><span class="x"></span>
<span class="x">&lt;div class=&quot;blog_post&quot;&gt;</span>
<span class="cp">%</span><span class="k"> endif</span><span class="x"></span>
</pre></div>

<p>As can be seen, we check for the existence of the category name "Style" in a list that contains the names of all the categories of the current post. 
If this name exists we output the div element with custom style.</p>
<p>This is enough for simple usage, but the idea can be extended for multiple category names and styles, allowing us to style each category differently.</p>
<p>Add the following code at the top of "_templates/site.mako":</p>
<div class="pygments_monokai"><pre><span class="cp">&lt;%</span>
<span class="n">category_styles</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Special&quot;</span> <span class="p">:</span> <span class="s">&quot;background-color: gold;&quot;</span><span class="p">,</span>
                   <span class="s">&quot;Another Example&quot;</span> <span class="p">:</span> <span class="s">&quot;border: 3px dashed black;&quot;</span> <span class="p">}</span>
<span class="n">category_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">post</span><span class="o">.</span><span class="n">categories</span><span class="p">]</span>
<span class="n">style</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">category_styles</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">category_names</span><span class="p">])</span>
<span class="cp">%&gt;</span><span class="x"></span>
</pre></div>

<p>As you can see, it is possible to add more category-style pairs into the "category_styles" dictionary. Ideally we would like to put this into the _config.py file , but currently I do not know how to do it.</p>
<p>And finally, we need to update the div element to look like this:</p>
<div class="pygments_monokai"><pre><span class="x">&lt;div class=&quot;blog_post&quot; style=&quot;</span><span class="cp">${</span><span class="n">style</span><span class="cp">}</span><span class="x">&quot;&gt;</span>
</pre></div>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://www.nihamkin.com</uri>
    </author>
    <title type="html"><![CDATA[Why I Chose Blogofile as my Blogging Platform]]></title>
    <link rel="alternate" type="text/html" href="http://www.nihamkin.com/2012/09/02/why-i-chose-blogofile-as-my-blogging-platform" />
    <id>http://www.nihamkin.com/2012/09/02/why-i-chose-blogofile-as-my-blogging-platform</id>
    <updated>2012-09-02T01:00:00Z</updated>
    <published>2012-09-02T01:00:00Z</published>
    <category scheme="http://www.nihamkin.com" term="About" />
    <category scheme="http://www.nihamkin.com" term="Blogofile" />
    <category scheme="http://www.nihamkin.com" term="Web Development" />
    <summary type="html"><![CDATA[Why I Chose Blogofile as my Blogging Platform]]></summary>
    <content type="html" xml:base="http://www.nihamkin.com/2012/09/02/why-i-chose-blogofile-as-my-blogging-platform"><![CDATA[<p>Blogofile is the blogging engine behind this blog.</p>
<p>First of all, what is "Blogofile"? The definition from the original <a href="http://www.blogofile.com/">website</a> says:</p>
<blockquote>
<p><strong>Definition: Blogofile (n):</strong> A static website compiler and blog engine, written and extended in Python.</p>
</blockquote>
<p>Blogofile creates a static, full featured blog out of posts that are stored in text files. This static website then can be copied to any web server capable of serving static content. No need for PHP, python, .NET or CGI installed.
This is contrary to blogs that use dynamic platforms. In these platform, pages are generated on demand, each time a user tries to access them (caching may apply).</p>
<p>There are some pros/cons for using static website generator for blogging. These have already been discussed on many blog posts by bloggers that switched to Blogofile. If you are interested in reading more just google it.</p>
<p>I will provide several reasons that bought me in. Please excuse me if those are duplicates of things that others have already noticed.</p>
<ol>
<li>Currently this website is hosted as a personal home page my university provides for students. For security reasons, students can host only static content, so using static content is the only option I have.</li>
<li>When I will not be able to host my blog on my university's server, I will be able to move to any other server independently of available technology, eventually making the hosting cheaper.</li>
<li>Because there is no "code behind", I do not have worry about security. </li>
<li>Bologofile can be easily customized. It is easy to learn and setup and beginner friendly.</li>
</ol>
<p>Hopefully in the future I will costumize Blogofile and share some experience with the readers.</p>]]></content>
  </entry>
</feed>
